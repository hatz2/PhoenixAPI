/**
 * Service and messages to interact with your pets.
 */
syntax = "proto3";

package phoenix.game;

import "google/protobuf/empty.proto";
import "phoenixapi/protos/game/entities.proto";
import "phoenixapi/protos/position.proto";
import "phoenixapi/protos/game/playermanager.proto";

// The state of your pet.
enum PetState {
    PET_STATE_D = 0;
    PET_STATE_S = 5; // In this state your pet shouldn't attack any move neither move.
    PET_STATE_F = 7;
    PET_STATE_WALK_AFTER_F = 8;
    PET_STATE_A = 12;
    PET_STATE_AFTER_A_CLICK = 15;
    PET_STATE_S_AFTER_A_F = 17; // I believe in this state if a monster attack your pet it will attack back even if he is in S mode.
}

// Services that allows you to read your pet information aswell as performing actions with them.
service PetManager {
    // Returns a list with your current pets and partners. While in the miniland it will returns a list with all your pets.
    rpc GetPets(google.protobuf.Empty) returns (PetObjManagerList) {}

    // Returns the current pet.
    rpc GetCurrentPet(google.protobuf.Empty) returns (PetObjManager) {}

    // Returns the current partner.
    rpc GetCurrentPartner(google.protobuf.Empty) returns (PetObjManager) {}

    // Changes the state of the specified pet.
    rpc SetPetState(PetStateRequest) returns (google.protobuf.Empty) {}

    // Move both your pet and partner to the specified 2D position.
    rpc Walk(Position) returns (google.protobuf.Empty) {}

    // Autoattack with your pets.
    rpc AutoAttack(AutoAttackRequest) returns (google.protobuf.Empty) {}

    // Use a skill with your pet.
    rpc PetAttack(AttackRequest) returns (google.protobuf.Empty) {}

    // Use a skill with your partner.
    rpc PartnerAttack(AttackRequest) returns (google.protobuf.Empty) {}
}

// Message that contains a list of pets.
message PetObjManagerList {
    repeated PetObjManager pets = 1; // The list of pets.
}

// Message that contains pet related information.
message PetObjManager {
    Position position = 1; // The 2D position of the pet.
    Position dest_position = 2; // The 2D destiny position where the pet is walking to.
    PetState state = 3; // The current state of the pet.
    entities.Npc npc = 4; // The NPC object of this pet.
}

// Message request to autoattack a target.
message AutoAttackRequest {
    entities.EntityType entity_type = 1; // The type of entity.
    sint32 entity_id = 2; // The ID of the entity.
}

// Message request to change the state of a pet.
message PetStateRequest {
    sint32 pet_id = 1; // The ID of your pet.
    PetState new_state = 2; // The state you want the pet to be.
}
